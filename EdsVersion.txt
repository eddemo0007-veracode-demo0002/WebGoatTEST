Version 00.00.0001

I add a rule to ignore the node_modules/ directory in the .gitignore file 
to ignore all dependencies that can be easily installed via a package manager 
like npm or yarn.

After that I ran the following commands:

After updating your .gitignore file, you might need to run a series of Git commands to apply the changes effectively, especially if any of the files that are now ignored were previously tracked by Git. Here are the steps you should follow:

1. Add the updated .gitignore file:

    git add .gitignore

2. Remove the files that are now ignored from the repository:
To stop tracking files that you've added to .gitignore, you need to remove them from the index (staging area) while keeping them in your working directory:

    git rm -r --cached .

This command removes all files from the staging area so that you can 
re-add them with the new ignore rules. It does not delete the files 
from your file system, just removes them from Git's tracking.

3. Add all files back (Git will respect .gitignore rules this time):

    git add .

This command re-adds the files, but now it respects the rules set in .gitignore, ignoring files you specified.

4. Commit the changes:

    git commit -m "Updated .gitignore and removed ignored files"

This commit will update the repository, excluding all files that should be ignored according to the updated .gitignore.

5. Push the changes to the remote repository (if you are using a remote repository):

    git push

This final step synchronizes your local changes with your remote repository.
This series of commands will ensure your .gitignore updates are fully integrated into your Git repository, both locally and remotely, effectively ignoring the files you specified.